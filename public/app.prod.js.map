{"version":3,"sources":["app.js"],"names":["DATA_KEY","init","api_url","cohorts","localStorage","JSON","parse","base_url","viewType","sortDirection","sortSelected","users","alerts","repos","branchDetail","selectedRepo","selectedRepoBranches","Object","keys","dropdown","title","page","location","hash","form","name","text","selectRepoHandler","parsedData","commits","branchGroups","id","forEach","branch","bid","branchId","push","branch_name","commit","cid","start","author","date","split","end","message","resourceId","formatDate","dateParams","Date","Intl","DateTimeFormat","dateStyle","timeStyle","format","displayCalendar","console","log","calendarEl","document","getElementById","calendar","FullCalendar","Calendar","timeZone","initialView","aspectRatio","headerToolbar","left","center","right","editable","resourceAreaHeaderContent","resources","events","render","sort","data","key","b","a","length","selectBranchHandler","branchName","filter","fetchRepoCommits","url","fetch","method","body","stringify","cache","then","resp","json","getGroups","cohortSelectHandler","event","pasteHandler","rows","target","value","map","row","pageChangeHandler","saveGroup","setItem","status","error","setTimeout","alert"],"mappings":"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","file":"app.prod.js","sourceRoot":"","sourcesContent":["const DATA_KEY = \"h8cohorts\"\n\nexport function init(api_url) {\n  let cohorts = localStorage[DATA_KEY] || \"{}\"\n  cohorts = JSON.parse(cohorts)\n\n  return {\n    base_url: api_url,\n    viewType: \"table\",\n    sortDirection: 1,\n    sortSelected: null,\n    users: [],\n    alerts: [],\n    repos: {},\n    branchDetail: {},\n    selectedRepo: null,\n    selectedRepoBranches: [],\n    cohorts: Object.keys(cohorts),\n    dropdown: false,\n    title: \"GCH - Git Commit History\",\n    page: location.hash,\n    form: {\n      name: '',\n      text: ''\n    },\n    selectRepoHandler() {\n      this.selectedRepoBranches = this.repos[this.selectedRepo]\n    },\n    parsedData() {\n      let commits = []\n      let branchGroups = []\n      let id = 1\n      this.selectedRepoBranches.forEach((branch, bid) => {\n        let branchId = bid + 1\n        branchGroups.push({ id: branchId, title: branch.branch_name })\n        branch.commits.forEach((commit, cid) => {\n\n          commits.push({\n            id,\n            start: commit.author.date.split(\" \")[0],\n            end: commit.author.date.split(\" \")[0],\n            title: commit.message,\n            resourceId: branchId\n          })\n          id++\n        })\n      })\n      return { commits, branchGroups }\n    },\n    formatDate(dateParams) {\n      let date = new Date(dateParams)\n      return new Intl.DateTimeFormat('id-ID', { dateStyle: 'full', timeStyle: 'short' }).format(date)\n    },\n    displayCalendar() {\n      let { commits, branchGroups } = this.parsedData()\n      console.log(branchGroups);\n      console.log(commits);\n\n      var calendarEl = document.getElementById('calendar');\n      var calendar = new FullCalendar.Calendar(calendarEl, {\n        timeZone: 'UTC',\n        initialView: 'resourceTimelineDay',\n        aspectRatio: 1.5,\n        headerToolbar: {\n          left: 'prev,next',\n          center: 'title',\n          right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'\n        },\n        editable: true,\n        resourceAreaHeaderContent: 'Branch',\n        resources: branchGroups,\n        events: commits\n      });\n      this.viewType = this.viewType == \"table\" ? \"timeline\" : \"table\"\n      calendar.render();\n    },\n    sort(data, key) {\n      this[data] = this[data].sort((b, a) => {\n        if (key === \"commits\") {\n          return a[key].length < b[key].length ? -this.sortDirection : this.sortDirection\n        } else {\n          return a[key] < b[key] ? -this.sortDirection : this.sortDirection\n        }\n      })\n      this.sortDirection = -this.sortDirection\n      this.sortSelected = key\n\n    },\n    selectBranchHandler(branchName) {\n      this.branchDetail = this.selectedRepoBranches.filter(branch => branch.branch_name === branchName)[0]\n\n      location.hash = \"branch_\" + this.branchDetail.branch_name\n    },\n\n    fetchRepoCommits() {\n      let url = this.base_url + '/hooks/github'\n      fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({ cache: true })\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          this.repos = data\n        })\n\n    },\n    getGroups() {\n      let cohorts = localStorage[DATA_KEY]\n      cohorts = JSON.parse(cohorts)\n      return Object.keys(cohorts)\n    },\n    cohortSelectHandler(event) {\n\n    },\n    pasteHandler(event) {\n      let text = event.target.value\n      let rows = text.split('\\n').map(row => {\n        return row.split('\\t')\n      })\n      this.users = rows\n    },\n    pageChangeHandler(event) {\n      this.page = location.hash\n    },\n    saveGroup() {\n      try {\n        let cohorts = localStorage[DATA_KEY] || \"{}\"\n        cohorts = JSON.parse(cohorts)\n        cohorts[this.form.name] = this.users\n        localStorage.setItem(DATA_KEY, JSON.stringify(cohorts))\n        this.cohorts = Object.keys(cohorts)\n        this.alerts.push({ status: 'success', message: 'Successfully add' })\n      } catch (error) {\n        this.alerts.push({ status: 'danger', message: error.message })\n      }\n      setTimeout(() => {\n        this.alert = []\n      }, 2000);\n    }\n  }\n}\n"]}